# PATH: src/app/routers/excel_router.py

from fastapi import APIRouter, File, UploadFile, Form, HTTPException, Depends, Response
from typing import Optional
from fastapi.responses import FileResponse
import os
from datetime import datetime
import shutil

router = APIRouter()

def get_file_path(filename: str, prefix: str = "") -> str:
    """ Helper function to create file path """
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    return f"static/results/{prefix}{timestamp}_{filename}"

@router.post("/generate_excel/")
async def generate_excel(
    archivo_stocks: UploadFile = File(...),
    archivo_coois: UploadFile = File(...),
    master_data: Optional[UploadFile] = File(None),  # Optional master data upload
    download_ea: bool = Form(True),
    download_eb: bool = Form(True)
):
    # Define default master data path
    master_data_path = "prod_files/data/master_data.xlsx"
    
    # Temporary save uploaded files
    temp_stocks_path = get_file_path(archivo_stocks.filename, "stocks_")
    temp_coois_path = get_file_path(archivo_coois.filename, "coois_")
    with open(temp_stocks_path, "wb") as buffer:
        shutil.copyfileobj(archivo_stocks.file, buffer)
    with open(temp_coois_path, "wb") as buffer:
        shutil.copyfileobj(archivo_coois.file, buffer)
    
    # Check if user uploaded a custom master data file
    if master_data:
        master_data_path = get_file_path(master_data.filename, "master_")
        with open(master_data_path, "wb") as buffer:
            shutil.copyfileobj(master_data.file, buffer)

    # Call your existing function to process files
    from src.app.generar_excel_crosstabs_completo import generar_excel_crosstabs_completo
    result_paths = generar_excel_crosstabs_completo(
        archivo_stocks=temp_stocks_path,
        archivo_coois=temp_coois_path,
        archivo_maestros=master_data_path
    )

    # Prepare response for downloading generated files
    response = {}
    if download_ea and result_paths[0]:
        response["ea_path"] = result_paths[0]
    if download_eb and result_paths[1]:
        response["eb_path"] = result_paths[1]
    
    return response

@router.get("/download/{file_path:path}")
async def download_file(file_path: str):
    """ Endpoint to download a file generated by the generate_excel endpoint """
    file_location = f"static/results/{file_path}"
    if os.path.isfile(file_location):
        return FileResponse(file_location, filename=file_path.split("_", 1)[-1], media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    raise HTTPException(status_code=404, detail="File not found")
